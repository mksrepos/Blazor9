@page "/employees/create"
@using Microsoft.EntityFrameworkCore
@using BlazorWebappOnlyServer.Models
@inject IDbContextFactory<BlazorWebappOnlyServer.Data.BlazorWebappOnlyServerContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Employee</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Employee" OnValidSubmit="AddEmployee" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="employeename" class="form-label">EmployeeName:</label> 
                <InputText id="employeename" @bind-Value="Employee.EmployeeName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Employee.EmployeeName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="designation" class="form-label">Designation:</label> 
                <InputText id="designation" @bind-Value="Employee.Designation" class="form-control" /> 
                <ValidationMessage For="() => Employee.Designation" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="salary" class="form-label">Salary:</label> 
                <InputNumber id="salary" @bind-Value="Employee.Salary" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Employee.Salary" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Employee Employee { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Employee.Add(Employee);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
}
