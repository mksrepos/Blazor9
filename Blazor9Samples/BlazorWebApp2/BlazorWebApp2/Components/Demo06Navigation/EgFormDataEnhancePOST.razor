@page "/demo06/demo-form-data-enhance-POST"

@using BlazorWebApp2.ViewModels
@inject BlazorWebApp2.Services.BogusGenerators.BogusProductService _bogusProductService

<h3>Form data-enhance Demo - with HTTP POST</h3>


<p><b>Check out the Network Tab in Developer Tools of the browser.</b></p>

<ul>
    <li>
        The FORM METHOD in this demo is <code>HTTP POST</code>.
    </li>
    <li>
        The POST request must specify which form is being submitted.
        To do this, ensure that the FORM elements have a <code>formname</code> attribute with any unique value,
        or pass a FormName parameter if using the <code>EditForm</code> component
    </li>
    <li>
        Since the application is configured to use the AntiforgeryToken middleware in Program.cs,
        for an HTML form, you would need to always add the AntiforgeryToken component manually for
        every POST submission.<br />
        Remember it is a HIDDEN FORM element.  So, it is not needed for HTTP GET requests.
    </li>
    <li>
        If the HTML FORM element is set with the <code>data-enhance="true"</code> attribute,
        only DOM manipulation related content is responded by the Blazor Circuit,
        since BLAZOR uses enhanced navigation as its default behaviour.
    </li>
    <li>
        If the HTML FORM element is set with the <code>data-enhance="false"</code> attribute, or if not mentioned,
        the, default behaviour is to do a complete form submission.  This would result in a "full postback cycle".
        This means that <b>the enhanced form handling feature is an OPT-IN feature</b>.
    </li>
    <li>
        This example also demonstrates how to use the <b>BOGUS</b> Nuget package.
    </li>
</ul>


<form method="post" data-enhance="false" @formname="form1">
    <AntiforgeryToken />
    <input name="query" placeholder="Search" value="@Query" />
    <button>Search</button>
</form>

@if (filteredEntries is null || filteredEntries.Count == 0)
{
    <p>No entries found</p>
}
else 
{
    <p>Entries found: @filteredEntries.Count</p>
    <ul>
        @foreach (var item in filteredEntries)
        {
            @* <li>@item.ProductName [ @item.ProductCategory ]</li>*@
            <li>@item</li>
        }
    </ul>
}

<hr />

<p>
    For a more detailed understanding on Enhanced Navigation, check out this short 13 minute video by Ganesh:<br /> 
    <a href="https://www.youtube.com/watch?v=t7Ws9mSRKM8" target="_blank">Enhanced Navigation</a>
</p>
<p>
    For a more detailed understanding on <b>Bogus</b> and how to generate test data, check out:<br />
    <a href="https://blog.wildermuth.com/2023/01/29/generating-sample-data-with-bogus/" target="_blank">Generating Sample Data with Bogus</a><br />
    by Shawn Wildermuth<br />
    <br />
    <a href="https://github.com/bchavez/Bogus">Github: BOGUS</a>
</p>


@code {

    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    public List<ProductViewModel>? entries = new();
    private List<ProductViewModel>? filteredEntries = new();

    protected override void OnInitialized()
    {
        entries = _bogusProductService.GenerateProducts();

        if( entries is not null)
        {
            filteredEntries = !string.IsNullOrEmpty(Query)
                ? entries.Where(e => e.ProductName.Contains(Query, StringComparison.OrdinalIgnoreCase)).ToList()
                : entries;
        }
    }

}