@page "/demo13/eg-Streaming"

@* @rendermode InteractiveServer *@

@attribute [StreamRendering]

<PageTitle>Weather Example</PageTitle>

<h3>Example of Streaming Render mode</h3>

<p class="fw-bold">
    NOTE:
</p>
<ol type="a">
    <li>
        StreamingRender Mode is a progressive enhancement to Static Server Rendering (SSR).
        <br />
        <span class="fw-bold">Note: It is applied by adding the StreamRenderingAttribute to the component.</span>
    </li>
    <li>
        The main layout is rendered as quickly as possible, and the DOM is patched as soon as the data is ready.
        This improves the UX (User eXperience).
    </li>
    <li class="fw-bold">
        You would need to still set the desired RenderMode property to address the interaction needs of the page.
        And handle the UX flows correctly by adopting the correct Component lifecycle events.
    </li>
</ol>


<hr />

@if (forecasts is null)
{
    <div class="alert alert-info d-flex align-items-center w-75 ms-auto me-auto">
        <strong>Loading information.  Please wait...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private WeatherForecast[]? forecasts;


    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(5000);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }


    // The View Model
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}


@* 

<hr />

<p class="text-danger">
    Current Render Mode in Page: @RendererInfo.Name
</p>

<p>
    Button in page: <button @onclick="HandleClick">Show message</button>
</p>

<div>
    @( (MarkupString) message )
</div>

@code
{
    private string message = "";

    void HandleClick ()
    {
        message += "Button clicked!<br />";
    }

}

*@
