@page "/demo10/demo-dispose"

@implements IDisposable

@inject ILogger<Eg07Dispose> _logger;

@rendermode InteractiveServer

<h3>Demo of How to implement the Dispose method using Dispose Pattern.</h3>

<p>@statusMessage</p>

<p>Counter: @counter</p>

@code {

    private int counter = 0;
    private string statusMessage = "Initializing....";

    private System.Timers.Timer? timer;         // the aggregated object.


    protected override void OnInitialized ()
    {
        timer = new System.Timers.Timer( interval: 1000 );
        timer.Elapsed += OnTimerTickAsync;
        timer.Start();

        statusMessage = "Started counter!";        
        _logger.LogInformation( "Timer object has been initialized!" );
    }


    private async void OnTimerTickAsync ( object? sender, System.Timers.ElapsedEventArgs e )
    {
        // Perform actions on timer tick
        statusMessage = $"Counter is now: {++counter}";

        _logger.LogInformation( "OnTimerTick called {counter}", counter );

        // Since this is a method called as part of a event, the StateHasChanged() method should be Invoked asynchronously.
        await InvokeAsync( () => StateHasChanged() );
    }


    #region IDisposable members implementing the Dispose Pattern

    // (DEFAULT name is DisposedValue)
    private bool isDisposed;           // flag to check if aggregated objects have been disposed 


    public void Dispose ()
    {
        // NOTE: Do not change this code. 
        //       Put cleanup code in 'Dispose(bool disposing)' method ONLY.
        Dispose( disposing: true );

        // Remove the reference to the Destructor, since the Dispose() method has beeen called successfully.
        // This speeds up the object finalization process.
        GC.SuppressFinalize( this );
    }


    protected virtual void Dispose ( bool disposing )
    {
        if (!isDisposed)
        {
            // Clean up the Timer Object
            if (disposing && timer is not null)
            {
                timer.Stop();
                timer.Dispose();

                _logger.LogInformation( "Timer object has now been disposed!" );
            }

            // TODO: free unmanaged resources (unmanaged objects) and override finalizer

            // TODO: set large fields to null

            // Finally, set the flag to indicate that all the aggregated objects have been cleaned up.
            isDisposed = true;
        }
    }


    // TODO: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
    ~Eg07Dispose()
    {
        // NOTE: Put cleanup code in 'Dispose(bool disposing)' method ONLY.
        
        // To enforce that Dispose() is called at least once, in case an explicit Dispose() is not called, 
        // we call it from the Destructor
        Dispose(disposing: false);
    }

    #endregion

}
