@page "/demo10/demo-dispose"

@implements IDisposable

@inject ILogger<Eg07Dispose> _logger;

@rendermode InteractiveServer

<h3>Demo of How to implement the Dispose method using Dispose Pattern.</h3>

<p>@statusMessage</p>

<p>@counter</p>

<input type="text" @bind-value="counter" />

@code {

    private int counter = 0;
    private string statusMessage = "Initializing....";

    private System.Timers.Timer? timer;         // the aggregated object.

    protected override void OnInitialized ()
    {
        timer = new System.Timers.Timer( interval: 2000 );
        timer.Elapsed += OnTimerTick;
        timer.Start();

        statusMessage = "Started counter!";        
        _logger.LogInformation( "Timer object has been initialized!" );
    }

    private void OnTimerTick ( object? sender, System.Timers.ElapsedEventArgs e )
    {
        // Perform actions on timer tick
        statusMessage = $"{++counter}";

        _logger.LogInformation( "OnTimerTick called {counter}", counter );

        StateHasChanged();
    }


    #region IDisposable members implementing the Dispose Pattern

    // (DEFAULT name is DisposedValue)
    private bool isDisposed;           // flag to check if aggregated objects have been disposed 


    protected virtual void Dispose(bool disposing)
    {
        if (!isDisposed)
        {
            if (disposing && timer is not null)
            {
                timer.Stop();
                timer.Dispose();

                _logger.LogInformation( "Timer object has now been disposed!" );
            }

            // TODO: free unmanaged resources (unmanaged objects) and override finalizer
            // TODO: set large fields to null

            isDisposed = true;
        }
    }

    // // TODO: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
    // ~Eg07Dispose()
    // {
    //     // Put cleanup code in 'Dispose(bool disposing)' method ONLY.
    //     
    //     // Enforce that Dispose() is called at least once.
    //     Dispose(disposing: false);
    // }


    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
    
        GC.SuppressFinalize(this);
    }

    #endregion

}
