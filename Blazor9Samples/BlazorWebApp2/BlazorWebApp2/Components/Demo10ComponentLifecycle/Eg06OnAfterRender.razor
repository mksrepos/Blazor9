@page "/demo10/demo-onafterrender"


<h3>Demo of OnAfterRender</h3>

@rendermode InteractiveServer

<div class="alert @cssClass">
    <p>Status: @statusMessage</p>
</div>


@code {

    private string cssClass = string.Empty;
    private string statusMessage = string.Empty;


    protected override void OnInitialized()
    {
        cssClass = "alert-secondary";
        statusMessage = "STEP 01 of 04.  Not rendered yet";

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        System.Threading.Thread.Sleep( 3000 );
        cssClass = "alert-success";
        statusMessage = "STEP 02 of 04.  Updated the Parameters";

        StateHasChanged();

        base.OnParametersSet();
    }


    /// <summary>
    ///     OnAfterRender is called after the component has been rendered 
    ///     and before the browser actually draws the component to the screen.
    ///     
    ///     This is called more than once.
    ///     If firstRender is FALSE, it means that OnAfterRender is called everytime State has changed.
    /// </summary>
    /// <param name="firstRender">true if first time rendering, false if not.</param>
    protected override void OnAfterRender ( bool firstRender )
    {

        if ( firstRender )
        {
            // TODO: LOADING DATA....
            System.Threading.Thread.Sleep( 3000 );
            cssClass = "alert-warning";
            statusMessage = "STEP 03 of 04. Rendered for the first time";
        }
        else
        {
            // TODO: LOADED
            System.Threading.Thread.Sleep( 3000 );
            cssClass = "alert-info";
            statusMessage = "STEP 04 of 04.  Rendered after an update";
        }

        StateHasChanged();

        base.OnAfterRender( firstRender );
    }


    /// <summary>
    ///     OnAfterRenderAsync() is the asynchronous version of OnAfterRender() method
    /// </summary>
    /// <param name="firstRender">true if first time rendering, false if not.</param>
    /// <returns>the Task object</returns>
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

}
